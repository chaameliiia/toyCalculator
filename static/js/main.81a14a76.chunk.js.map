{"version":3,"sources":["components/buttons/Functions.js","components/buttons/Nums.js","components/buttons/Operands.js","components/ResultWindow.js","components/Calculator.js","components/RecordWindow.js","App.js","serviceWorker.js","index.js"],"names":["FuncStyled","styled","div","Functions","clickFunc","className","onClick","type","NumStyled","nums","id","eng","num","Nums","clickBtn","clickSubmit","map","v","key","OperStyled","symbols","sym","Operands","ResultWindowStyled","ResultWindow","calcResult","useEffect","CalculatorStyled","Calculator","textContent","useState","btnText","setBtnText","result","setResult","operA","useRef","operB","newText","bln","numClicked","operClicked","calculate","newNum","current","autoFocus","value","onChange","e","console","log","target","keyCode","action","method","name","preventDefault","clickRecord","document","querySelector","clearing","slice","length","Number","newBtnTxt","slikce","ResutlWindowStyled","RecordWindow","CalcWrapperStyled","App","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.81a14a76.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FuncStyled = styled.div`\r\n  width: 100%;\r\n\r\n  button {\r\n    background: #eee;\r\n\r\n    &:hover {\r\n      background: #333;\r\n      color: #fff;\r\n    }\r\n\r\n    &:active {\r\n      background: #444;\r\n    }\r\n  }\r\n  \r\n  .clear {\r\n    width: 50%;\r\n  }\r\n\r\n  .erase {\r\n    width: 50%;\r\n  }\r\n`;\r\n\r\nconst Functions = ({ clickFunc }) => {\r\n  return (\r\n    <FuncStyled\r\n      className=\"functions\"\r\n      onClick={clickFunc}\r\n    >\r\n      <button\r\n        type=\"button\"\r\n        className=\"clear\"\r\n      >\r\n        CE\r\n      </button>\r\n      <button\r\n        type=\"button\"\r\n        className=\"erase\"\r\n      >\r\n        ⬅\r\n      </button>\r\n    </FuncStyled>\r\n  );\r\n};\r\n\r\nexport default Functions;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NumStyled = styled.div`\r\n  width: 75%;\r\n\r\n  button {\r\n    width: 33.3%;\r\n  }\r\n\r\n  .number {\r\n    background: #fff;\r\n    \r\n    &:hover {\r\n      background: #333;\r\n      color: #fff;\r\n    }\r\n\r\n    &:active {\r\n      background: #444;\r\n    }\r\n  }\r\n\r\n  .zero {\r\n    width: 66.6%;\r\n  }\r\n\r\n  .total {\r\n    background: #eee;\r\n\r\n    &:hover {\r\n      background: #333;\r\n      color: #fff;\r\n    }\r\n\r\n    &:active {\r\n      background: #444;\r\n    }\r\n  }\r\n`;\r\n\r\nconst nums = [\r\n  {\r\n    id: 0,\r\n    eng: 'seven',\r\n    num: 7,\r\n  },\r\n  {\r\n    id: 1,\r\n    eng: 'eight',\r\n    num: 8,\r\n  },\r\n  {\r\n    id: 2,\r\n    eng: 'nine',\r\n    num: 9,\r\n  },\r\n  {\r\n    id: 3,\r\n    eng: 'four',\r\n    num: 4,\r\n  },\r\n  {\r\n    id: 4,\r\n    eng: 'five',\r\n    num: 5,\r\n  },\r\n  {\r\n    id: 5,\r\n    eng: 'six',\r\n    num: 6,\r\n  },\r\n  {\r\n    id: 6,\r\n    eng: 'one',\r\n    num: 1,\r\n  },\r\n  {\r\n    id: 7,\r\n    eng: 'two',\r\n    num: 2,\r\n  },\r\n  {\r\n    id: 8,\r\n    eng: 'three',\r\n    num: 3,\r\n  },\r\n  {\r\n    id: 9,\r\n    eng: 'zero',\r\n    num: 0,\r\n  },\r\n];\r\n\r\nconst Nums = ({ clickBtn, clickSubmit }) => {\r\n  return (\r\n    <NumStyled className=\"num\">\r\n      {nums.map(v => {\r\n        return (\r\n          <button\r\n            key={v.id}\r\n            type=\"button\"\r\n            onClick={clickBtn}\r\n            className={`number ${v.eng}`}\r\n          >\r\n            {v.num}\r\n          </button>\r\n        )\r\n      })}\r\n      <button\r\n        type=\"submit\"\r\n        onClick={clickSubmit}\r\n        className=\"total\"\r\n      >\r\n        =\r\n      </button>\r\n    </NumStyled>\r\n  );\r\n};\r\n\r\nexport default Nums;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst OperStyled = styled.div`\r\n  width: 25%;\r\n\r\n  button {\r\n    background: #eee;\r\n    width: 100%;\r\n\r\n    &:hover {\r\n      background: #333;\r\n      color: #fff;\r\n    }\r\n\r\n    &:active {\r\n      background: #444;\r\n    }\r\n  }\r\n`;\r\n\r\nconst symbols = [\r\n  {\r\n    id: 0,\r\n    eng: 'plus',\r\n    sym: '+',\r\n  },\r\n  {\r\n    id: 1,\r\n    eng: 'minus',\r\n    sym: '-',\r\n  },\r\n  {\r\n    id: 2,\r\n    eng: 'times',\r\n    sym: '*',\r\n  },\r\n  {\r\n    id: 3,\r\n    eng: 'devide',\r\n    sym: '/',\r\n  },\r\n];\r\n\r\nconst Operands = ({ clickBtn }) => {\r\n  return (\r\n    <OperStyled className=\"operands\">\r\n      {symbols.map(v => {\r\n        return (\r\n          <button\r\n            key={v.id}\r\n            type=\"submit\"\r\n            onClick={clickBtn}\r\n            className={v.eng}\r\n          >\r\n            {v.sym}\r\n          </button>\r\n        )\r\n      })}\r\n    </OperStyled>\r\n  );\r\n};\r\n\r\nexport default Operands;","import React, { useEffect } from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResultWindowStyled = styled.div`\r\n  background: #333;\r\n  border: 1px solid #333;\r\n  border-radius: 4px;\r\n  color: #fff;\r\n  overflow: hidden;\r\n  padding: .5rem;\r\n  text-align: right;\r\n  width: 100%;\r\n\r\n  .calcResult {\r\n    font-size: 1.5em;\r\n    height: 80px;\r\n    padding-top: 1.2rem;\r\n  }\r\n`;\r\n\r\nconst ResultWindow = ({ calcResult }) => {\r\n  useEffect(() => {\r\n  }, [calcResult]);\r\n\r\n  return (\r\n    <ResultWindowStyled>\r\n      <p className=\"calcResult\">\r\n        {calcResult}\r\n      </p>     \r\n    </ResultWindowStyled>\r\n  );\r\n};\r\n\r\nexport default ResultWindow;","import React, { useState, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport Functions from './buttons/Functions';\r\nimport Nums from './buttons/Nums';\r\nimport Operands from './buttons/Operands';\r\nimport ResultWindow from './ResultWindow';\r\n\r\nconst CalculatorStyled = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n  width: 65%;\r\n\r\n  .clickRecord {\r\n    background: transparent;\r\n    border: none;\r\n    color: #ccc;\r\n    font-size: .8em;\r\n    left: 0;\r\n    outline-style: none;\r\n    padding-right: .7rem;\r\n    padding-top: .7rem;\r\n    position: absolute;\r\n    top: 0;\r\n    text-align: right;\r\n    width: 100%;\r\n  }\r\n  \r\n  form {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    width: 100%;\r\n\r\n    button {\r\n      border: 1px solid #333;\r\n      border-radius: 4px;\r\n      height: 70px;\r\n      outline-style: none;\r\n\r\n      &:hover {\r\n        background: #333;\r\n        color: #fff;\r\n      }\r\n\r\n      &:active {\r\n        background: #444;\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst Calculator = () => {\r\n  const [btnText, setBtnText] = useState('');\r\n  const [result, setResult] = useState(0);\r\n  let operA = useRef('');\r\n  let operB = useRef('');\r\n  let newText = useRef('');\r\n  let bln = useRef(false);\r\n  let numClicked = useRef(false);\r\n  let operClicked = useRef(false);\r\n  let textContent;\r\n\r\n  const calculate = (operB, result, newNum) => {\r\n    // 이전 결과값, 새 입력값 연산 함수\r\n    switch(operB) {\r\n      case '+':\r\n        setResult(result + newNum);\r\n        break;\r\n      case '-':\r\n        setResult(result - newNum);\r\n        break;\r\n      case '*':\r\n        newText.current = 1;\r\n        setResult(result * newNum);\r\n        break;\r\n      case '/':\r\n        newText.current = 1;\r\n        setResult(result / newNum);\r\n        break;\r\n      default: \r\n        setResult(btnText);\r\n        break;\r\n    }\r\n    return result;\r\n  };\r\n\r\n  const _changeValue = e => { // 키보드로 숫자 입력할 때\r\n    console.log(typeof e.target.keyCode);\r\n    setBtnText(e.target.value);\r\n  }\r\n\r\n  const _clickNum = e => { // 숫자 버튼 클릭할 때\r\n    e.preventDefault();\r\n    textContent = e.target.textContent;\r\n    setBtnText(btnText + textContent);\r\n    newText.current += textContent;\r\n    bln.current = false;\r\n    numClicked.current = true;\r\n  };\r\n\r\n  const _clickSubmit = e => { // = 버튼 클릭할 때\r\n    e.preventDefault();\r\n    textContent = e.target.textContent;\r\n    calculate(operB.current, Number(result), Number(newText.current));\r\n    setBtnText('');\r\n    operA.current = '';\r\n    operB.current = '';\r\n    bln.current = false;\r\n  };\r\n\r\n  const _clickOper = e => { // 연산자 버튼 클릭할 때\r\n  // b=true\r\n    let newBtnTxt = btnText;\r\n    e.preventDefault();\r\n    textContent = e.target.textContent;\r\n    if(btnText === '') { // 연산할 숫자 없을 경우\r\n      return;\r\n    }\r\n    if(operB.current === textContent) { // 같은 연산자 연속으로 클릭한 경우\r\n      operClicked.current = true;\r\n\r\n      if(numClicked === true && operClicked === true) {\r\n        return;\r\n      }\r\n    }\r\n    \r\n    if(bln.current) { // 기존 연산자 다른 연산자로 덮어쓰기\r\n      newBtnTxt = newBtnTxt.slikce(0, newBtnTxt.length - 1);\r\n      // 마지막 연산자 1개 제거\r\n    } else {\r\n      bln.current = true;\r\n    }\r\n\r\n    setBtnText(newBtnTxt + textContent);\r\n    operA.current = textContent;\r\n    calculate(operB.current, Number(result), Number(newText.current));\r\n    operB.current = operA.current; // 현재 연산자를 다음 연산자로\r\n    newText.current = '';\r\n  };\r\n\r\n  const _clickFunc = e => { // 기능 버튼 클릭할 때\r\n    e.preventDefault();\r\n\r\n    const clearing = () => { // 전체 값 초기화\r\n      const clickRecord = document.querySelector('.clickRecord');\r\n      console.log(clickRecord);\r\n      setResult(0);\r\n      operA.current = '';\r\n      operB.current = '';\r\n      bln.current = false;\r\n    };\r\n\r\n    const erasing = () => { // 마지막 한 글자 지우기\r\n      setBtnText(btnText.slice(0, btnText.length - 1));\r\n      newText.current = newText.current.slice(0, newText.current.length - 1);\r\n    };\r\n\r\n    switch(e.target.className) {\r\n      case 'clear':\r\n        clearing();\r\n        break;\r\n\r\n      case 'erase':\r\n        erasing();\r\n        break;\r\n\r\n      default: return;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <CalculatorStyled>\r\n      {/* 계산부 */}\r\n      <input\r\n        autoFocus\r\n        value={btnText}\r\n        type=\"text\"\r\n        onChange={_changeValue}\r\n        className=\"clickRecord\"\r\n      />\r\n      <ResultWindow // 출력부\r\n        calcResult={result}\r\n        className=\"ResultWindow\"\r\n      />\r\n      <form\r\n        action=\"/\"\r\n        id=\"calculator\"\r\n        method=\"get\"\r\n        name=\"calculator\"\r\n      >\r\n        <Functions //기능 버튼\r\n          clickFunc={_clickFunc}\r\n        />\r\n        <Nums // 숫자 버튼\r\n          clickBtn={_clickNum}\r\n          clickSubmit={_clickSubmit}\r\n        />\r\n        <Operands\r\n          clickBtn={_clickOper} // 연산자 버튼\r\n        />\r\n      </form>\r\n    </CalculatorStyled>\r\n  );\r\n};\r\n\r\nexport default Calculator;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst ResutlWindowStyled = styled.div`\r\n  border: 1px dotted #333;\r\n  border-radius: 4px;\r\n  width: 35%;\r\n`;\r\n\r\nconst RecordWindow = () => {\r\n  return (\r\n    <ResutlWindowStyled>\r\n      \r\n    </ResutlWindowStyled>\r\n  );\r\n};\r\n\r\nexport default RecordWindow;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport Calculator from './components/Calculator';\r\nimport RecordWindow from './components/RecordWindow';\r\nimport 'asset/common.css';\r\n\r\nconst CalcWrapperStyled = styled.div`\r\n  display: flex;\r\n  left: 50%;\r\n  position: fixed;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  width: 600px;\r\n`;\r\n\r\nfunction App() {\r\n  return (\r\n    <CalcWrapperStyled\r\n      className=\"calcWrapper\"\r\n    >\r\n      <Calculator />\r\n      <RecordWindow />\r\n    </CalcWrapperStyled>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}